---
 include/linux/swap.h |    2 +-
 mm/memory.c          |    2 +-
 mm/swapfile.c        |    9 ++++-----
 mm/vmscan.c          |    2 +-
 4 files changed, 7 insertions(+), 8 deletions(-)

Index: linux-2.6.37-ck1/include/linux/swap.h
===================================================================
--- linux-2.6.37-ck1.orig/include/linux/swap.h	2011-01-06 14:07:57.889301442 +1100
+++ linux-2.6.37-ck1/include/linux/swap.h	2011-01-06 14:07:58.019309165 +1100
@@ -192,7 +192,7 @@ struct swap_list_t {
 	int next;	/* swapfile to be used next */
 };
 
-/* Swap 50% full? Release swapcache more aggressively.. */
+/* Swap 50% full? */
 #define vm_swap_full() (nr_swap_pages*2 < total_swap_pages)
 
 /* linux/mm/page_alloc.c */
Index: linux-2.6.37-ck1/mm/memory.c
===================================================================
--- linux-2.6.37-ck1.orig/mm/memory.c	2011-01-06 14:04:10.573810305 +1100
+++ linux-2.6.37-ck1/mm/memory.c	2011-01-06 14:07:58.019309165 +1100
@@ -2754,7 +2754,7 @@ static int do_swap_page(struct mm_struct
 	mem_cgroup_commit_charge_swapin(page, ptr);
 
 	swap_free(entry);
-	if (vm_swap_full() || (vma->vm_flags & VM_LOCKED) || PageMlocked(page))
+	if ((vma->vm_flags & VM_LOCKED) || PageMlocked(page))
 		try_to_free_swap(page);
 	unlock_page(page);
 	if (swapcache) {
Index: linux-2.6.37-ck1/mm/swapfile.c
===================================================================
--- linux-2.6.37-ck1.orig/mm/swapfile.c	2011-01-06 14:04:10.582810838 +1100
+++ linux-2.6.37-ck1/mm/swapfile.c	2011-01-06 14:07:58.020309225 +1100
@@ -321,7 +321,7 @@ checks:
 		scan_base = offset = si->lowest_bit;
 
 	/* reuse swap entry of cache-only swap if not busy. */
-	if (vm_swap_full() && si->swap_map[offset] == SWAP_HAS_CACHE) {
+	if (si->swap_map[offset] == SWAP_HAS_CACHE) {
 		int swap_was_freed;
 		spin_unlock(&swap_lock);
 		swap_was_freed = __try_to_reclaim_swap(si, offset);
@@ -410,7 +410,7 @@ scan:
 			spin_lock(&swap_lock);
 			goto checks;
 		}
-		if (vm_swap_full() && si->swap_map[offset] == SWAP_HAS_CACHE) {
+		if (si->swap_map[offset] == SWAP_HAS_CACHE) {
 			spin_lock(&swap_lock);
 			goto checks;
 		}
@@ -425,7 +425,7 @@ scan:
 			spin_lock(&swap_lock);
 			goto checks;
 		}
-		if (vm_swap_full() && si->swap_map[offset] == SWAP_HAS_CACHE) {
+		if (si->swap_map[offset] == SWAP_HAS_CACHE) {
 			spin_lock(&swap_lock);
 			goto checks;
 		}
@@ -739,8 +739,7 @@ int free_swap_and_cache(swp_entry_t entr
 		 * Not mapped elsewhere, or swap space full? Free it!
 		 * Also recheck PageSwapCache now page is locked (above).
 		 */
-		if (PageSwapCache(page) && !PageWriteback(page) &&
-				(!page_mapped(page) || vm_swap_full())) {
+		if (PageSwapCache(page) && !PageWriteback(page)) {
 			delete_from_swap_cache(page);
 			SetPageDirty(page);
 		}
Index: linux-2.6.37-ck1/mm/vmscan.c
===================================================================
--- linux-2.6.37-ck1.orig/mm/vmscan.c	2011-01-06 14:07:57.758293657 +1100
+++ linux-2.6.37-ck1/mm/vmscan.c	2011-01-06 14:07:58.020309225 +1100
@@ -900,7 +900,7 @@ cull_mlocked:
 
 activate_locked:
 		/* Not a candidate for swapping, so reclaim swap space. */
-		if (PageSwapCache(page) && vm_swap_full())
+		if (PageSwapCache(page))
 			try_to_free_swap(page);
 		VM_BUG_ON(PageActive(page));
 		SetPageActive(page);
